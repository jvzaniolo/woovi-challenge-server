type Query {
  "Get all tasks"
  tasks: [Task!]!
  "Get a specific task by ID"
  task(id: ID!): Task!
}

type Mutation {
  "Create a new task"
  createTask(title: String!, description: String): MutateTaskPayload!
  "Update an existing task"
  updateTask(input: UpdateTaskInput!): MutateTaskPayload!
  "Delete an existing task"
  deleteTask(id: ID!): MutateTaskPayload!
}

type MutateTaskPayload {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Whether the task was created successfully"
  success: Boolean!
  "The task that was created"
  task: Task
}

input UpdateTaskInput {
  "The ID of the task to update"
  id: ID!
  "The task's new title"
  title: String
  "The task's new description"
  description: String
  "The task's new completion status"
  completed: Boolean
}

"A collection of tasks that need to be completed"
type Task {
  "The ID for the task"
  _id: ID!
  "The task's title"
  title: String!
  "The task's description"
  description: String
  "The task's completion status"
  completed: Boolean!
}
